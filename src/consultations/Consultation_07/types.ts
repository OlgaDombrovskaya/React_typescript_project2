// types.ts
export type Todo = {
  id: number;
  text: string;
  completed: boolean;
};

export enum TODO_FORM_VALUES {
  TEXT = "text",
}
// Пояснения:

// export — делает enum доступным для импорта в других файлах.
// То есть можно будет написать:

// import { TODO_FORM_VALUES } from "./constants";


// enum — специальная конструкция TypeScript для описания набора "именованных констант".
// Это удобнее и безопаснее, чем "магические строки".

// TODO_FORM_VALUES — имя перечисления (enum). В нём мы будем хранить значения для полей формы.

// TEXT = "text" — объявили один ключ TEXT, которому присвоено строковое значение "text".
// Теперь вместо того, чтобы в коде писать "text" вручную, мы можем использовать TODO_FORM_VALUES.TEXT.




// Зачем так делать?

// Чтобы избежать ошибок при работе с формами (например, случайно написать "txet" вместо "text").

// Чтобы можно было легко расширять форму. Например, добавить дату или приоритет задачи.

// Пример использования в нашем To-Do

// Допустим, мы хотим хранить input в объекте состояния формы:

// const [form, setForm] = useState({
//   [TODO_FORM_VALUES.TEXT]: "",
// });


// А в Input:

// <Input
//   type="text"
//   value={form[TODO_FORM_VALUES.TEXT]}
//   onChange={(e) =>
//     setForm({ ...form, [TODO_FORM_VALUES.TEXT]: e.target.value })
//   }
//   placeholder="Введите задачу..."
// />


// Теперь, если появятся новые поля (например, дата), мы просто добавим
//  их в enum и форму — и весь код будет работать без "магических строк".