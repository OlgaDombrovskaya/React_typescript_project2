// –ß—Ç–æ —Ç–∞–∫–æ–µ –¥–∂–µ–Ω–µ—Ä–∏–∫–∏ (Generics) –≤ TypeScript

// –î–∂–µ–Ω–µ—Ä–∏–∫–∏ ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± –ø–∏—Å–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–¥,
//  –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä–æ–≥—É—é —Ç–∏–ø–∏–∑–∞—Ü–∏—é.
// –û–Ω–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–∏–ø—É (string, number –∏ —Ç.–¥.),
//  –∞ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–∏–ø–∞ (–æ–±—ã—á–Ω–æ T).

// üìå –ì–ª–∞–≤–Ω–∞—è –∏–¥–µ—è:
// –¢—ã –ø–∏—à–µ—à—å —Ñ—É–Ω–∫—Ü–∏—é/—Ç–∏–ø/–∫–ª–∞—Å—Å –æ–¥–∏–Ω —Ä–∞–∑,
//  –∞ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ TypeScript.

// function identity(value: any): any {
//     return value;
// }

// let num = identity(42); // num: any ‚Äî TS –Ω–µ –∑–Ω–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ number
// let str = identity("Hello"); // str: any ‚Äî –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–µ—Ç
// // –ü—Ä–æ–±–ª–µ–º–∞: —Ç–µ—Ä—è–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ.

// =========================================

// –ü—Ä–∏–º–µ—Ä 2: –° –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–º
// function identity<T>(value: T): T {
//     return value;
// }

// let num = identity<number>(42); // num: number
// let str = identity<string>("Hello"); // str: string

//===============================================================

// –ü—Ä–∏–º–µ—Ä 3: –î–∂–µ–Ω–µ—Ä–∏–∫ —Å –º–∞—Å—Å–∏–≤–æ–º
// function getFirstElement<T>(arr: T[]): T {
//     return arr[0];
// }

// let firstNum = getFirstElement([1, 2, 3]); // T = number
// let firstStr = getFirstElement(["a", "b", "c"]); // T = string


// üìå TS –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏—Ç —Ç–∏–ø (–Ω–µ –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ —è–≤–Ω–æ –ø–∏—Å–∞—Ç—å <number>).
