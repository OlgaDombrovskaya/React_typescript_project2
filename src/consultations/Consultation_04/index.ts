
// üìå –û—Å–Ω–æ–≤–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ TypeScript
// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è
// –í TS —Ç–∏–ø—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, —Ñ—É–Ω–∫—Ü–∏–π, –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å —è–≤–Ω–æ.
// –û—à–∏–±–∫–∏ –≤ —Ç–∏–ø–∞—Ö –≤—ã—è–≤–ª—è—é—Ç—Å—è –µ—â—ë –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏, –∞ –Ω–µ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞.
// –≠—Ç–æ –ø–æ–≤—ã—à–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ —Å–Ω–∏–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–≥–æ–≤.
// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å JavaScript
// –õ—é–±–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JS-–∫–æ–¥ ‚Äî —ç—Ç–æ —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π TS-–∫–æ–¥.
// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–∏–ø—ã –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ.
// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π JS
// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ES6+ –∏ –±—É–¥—É—â–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.
// TS –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç –∏—Ö –≤ –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–π JS –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±—Ä–∞—É–∑–µ—Ä–∞–º–∏.
// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –û–û–ü (–æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è)
// –ö–ª–∞—Å—Å—ã, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–æ—Å—Ç—É–ø–∞ (public, private, protected), –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã.
// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã
// –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø–∏—Å—ã–≤–∞—Ç—å —Ñ–æ—Ä–º—É –æ–±—ä–µ–∫—Ç–æ–≤, —Å–∏–≥–Ω–∞—Ç—É—Ä—ã —Ñ—É–Ω–∫—Ü–∏–π, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö.
// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ type –∏ interface –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤.
// –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
// –ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–∏–ø–∞–º —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, VS Code) –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—é—Ç –≤–∞—à –∫–æ–¥, –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç –º–µ—Ç–æ–¥—ã, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—Ç –æ–± –æ—à–∏–±–∫–∞—Ö.


console.log("Welcome to Typescript");

let x = 10;
// x = "Hello";
console.log(x);

// –ö–∞–∫ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å?
// –Ø–≤–Ω–æ vs –ù–µ—è–≤–Ω–æ
// –ü—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–∏ÃÜ –º—ã —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö:

let y: number = 100; // –ü—Ä–∏–º–µ—Ä —è–≤–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
let p: string;
p = "Hello";

//=======================================================================
// –î–∂–Ω–µ–Ω–µ—Ä–∏–∫–∏ - —ç—Ç–æ —Å–ø–æ—Å–æ–± –ø–∏—Å–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–¥.
//–∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä–æ–≥—É—é —Ç–∏–ø–∏–∑–∞—Ü–∏—é.
//–û–Ω–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–∏–ø—É (string, number –∏ —Ç.–ø),
//–∞ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–∏–ø–∞ (–æ–±—ã—á–Ω–æ –¢).

// –ì–ª–∞–≤–Ω–∞—è  –∏–¥–µ—è:
//–¢—ã –ø–∏—à–µ—à—å —Ñ—É–Ω–∫—Ü–∏—é /—Ç–∏–ø/–∫–ª–∞—Å—Å –æ–¥–∏–Ω —Ä–∞–∑,
// –∞ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ TypeScript.

// function identity(value: any): any{
// return value;
// }

// let num = identity(42); // num: any - TS –Ω–µ –∑–Ω–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ number
// let str = identity("Hello"); // str: any - –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–µ—Ç
// // –ü—Ä–æ–±–ª–µ–º–∞: —Ç–µ—Ä—è–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ.

//===============================================

// –ü—Ä–∏–º–µ—Ä 2 —Å –î–∂–µ–Ω–µ—Ä–∏–∫–æ–º

// function identity <T>(value: T): T {
// return value;
// }

// let num = identity<number>(42); // num: number
// let str = identity<string>("Hello"); // str: string

//=================================================================

// –ü—Ä–∏–º–µ—Ä 3 —Å –î–∂–µ–Ω–µ–Ω—Ä–∏–∫–æ–º

//function getFirstElement<T>(arr: T[]): T{
// return arr[0];
// }

// let firstNum = getFirstElement([1,2,3]); // T = number
// let firstStr = getFirstElement(["a", "b", "c"]); // T = string

// TS –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏—Ç —Ç–∏–ø (–Ω–µ –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ —è–≤–Ω–æ –ø–∏—Å–∞—Ç—å <number>).

//=====================================================

let isDrunk: boolean = true;

// –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ type
// –º—ã –º–æ–∂–µ–º –æ–±—ä—è–≤–ª—è—Ç—å —Ç–∏–ø—ã –æ—Ç–¥–µ–ª—å–Ω–æ

type Age = number; // –¢–∏–ø—ã –≤—Å–µ–≥–¥–∞ –ø–∏—à—É—Ç—Å—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
let myAge: Age = 29;

let k:number| string = 10;
k = "Hello";
console.log(k);

let qwerty:any  //–ø–æ—á—Ç–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

// –ü—Ä–∏–º–µ—Ä Union type
type Pet = "cat"| "dog"; // –∫—Ä–æ–º–µ —Å—Ç—Ä–æ–∫–∏ cat –∏–ª–∏ dog –Ω–µ –ø—Ä–æ–π–¥–µ—Ç
let petOfAlex: Pet ="cat"
petOfAlex = "dog"

// –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å Union type
type ExtendedPet = Pet | "bird"; // –∫—Ä–æ–º–µ —Å—Ç—Ä–æ–∫–∏ cat,dog –∏–ª–∏ bird –Ω–µ –±—É–¥–µ—Ç
let petOfAlex2: ExtendedPet = "cat"

type Gender = "male" | "female"; // –∑–¥–µ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–≤–∞ type
type ExtendedGender = Gender | "non binary person";

// –ö–∞–∫ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–∏–Ω–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–∏ÃÜ
let fruits:string[]= ["aplle", "orange", "mango"];
// –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∏–ø –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
let vegetables:string[] = [];
vegetables.push("potato");
console.log(vegetables);

// –ö–∞–∫ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã?

type User ={
    firstName: string,
    isAdmin: boolean
}

const user1: User={
    firstName: "Vladimir",
    isAdmin:false
}

interface Monster{
    name:string,
    height:number,
    isAlive:boolean,
    isEvil:boolean
}
// –°–æ–∑–¥–∞–ª–∏ –æ–±—ä–µ–∫—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
const frankestein: Monster ={
    name: "Frankestein",
    height: 10,
    isAlive: true,
    isEvil: false
}

interface ExtendedMonster extends Monster{ //—Ä–∞—Å—à–∏—Ä–∏–Ω–∏–µ —á–µ—Ä–µ–∑ extends
    isFlying:boolean
}

const dracula: ExtendedMonster ={
    name: "Dracula",
    height: 10,
    isAlive: true,
    isEvil: false,
    isFlying: true
    
}

// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è ..?..(–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–µ –ø–æ–ª–µ -- –æ—Ç–¥–∞–π –º–Ω–µ –∑–Ω–∞—á–µ–Ω–∏–µ)

interface Food{
    title: string;
    isSweet?: boolean;
}
const pancake: Food ={ title:"Pancakes", isSweet: true};
const carrot: Food ={ title:"Carrot"}; // –Ω–µ  —Ä—É–≥–∞–µ—Ç—Å—è, —á—Ç–æ –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª–µ
// isSweet, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω–æ —è–≤–ª—è–µ—Ç—Å—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º

console.log(pancake);
console.log(carrot);


// –¢–∏–ø–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
// –ù—É–∂–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

function sum(a:number, b:number):number{
    return a+b;
}
const dev = (a: number, b:number) =>a/b; //—Å—Ç—Ä–µ–ª–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º —Å–ª–æ–≤–∞ function –∏ return(–Ω–µ—Ç this, —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç)

console.log(sum(10,12));
console.log(dev(20,2));

function toUpper(str: ExtendedPet):string{
    return str.toUpperCase()//str - –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞(–º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º)
}
console.log(toUpper("cat"))

//—è–≤–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è 
// ("b" + "a" + + "a" + "a" .toLowerCase() "banana" - - - (—Å–∏–º–≤–æ–ª—ã + "a" –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç—Å—è –≤ nan)
const nine = Number("9"); 
const nineStr = String(9);

console.log(nine);
console.log(nineStr);

// | –°–∏—Ç—É–∞—Ü–∏—è                          | –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è            |          |
// | --------------------------------- | ----------------------- | -------- |
// | –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –æ–±—ä–µ–∫—Ç–∞            | `interface` ‚úÖ           |          |
// | –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è (\`                   | `, `&\`, —É—Å–ª–æ–≤–Ω—ã–µ —Ç–∏–ø—ã) | `type` ‚úÖ |
// | –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ | `interface` ‚úÖ           |          |
// | –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤       | `type` ‚úÖ                |          |


// –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ä–æ–¥ City
//  —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å–≤–æ–∏ÃÜ—Å—Ç–≤–∞–º–∏:
//  name
//  population
// riversName - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∫–∏
// isCapital - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥–æ—Ä–æ–¥ —Å—Ç–æ–ª–∏—Ü–µ–∏ÃÜ
// isTouristic - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥–æ—Ä–æ–¥ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–º


// –°–æ–∑–¥–∞–π—Ç–µ  –æ–±—ä–∫—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞


// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞—Å—à–∏—Ä—è—é—â–∏–π –≥–æ—Ä–æ–¥
//  —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å–≤–æ–∏ÃÜ—Å—Ç–≤–∞–º–∏: –¥–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É –æ—Å–Ω–æ–≤–∞–Ω–∏—è

interface City{
    name: string;
    population: number;
    riversName?: string;
    isTouristic?: boolean;
    isCapital?: boolean;
}

const Berlin: City={
    name: "Berlin",
    population: 3_000_000,
    isCapital: true,
    riversName:"ELBE",
    isTouristic: true
}

console.log(Berlin);


// interface —á–∞—â–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä –∫–ª–∞—Å—Å–æ–≤, API-–æ—Ç–≤–µ—Ç–æ–≤ –∏ –æ–±—ä–µ–∫—Ç–æ–≤,
//  –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –º–æ–≥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:


// interface User {
//   name: string;
// }

// interface User {
//   age: number;
// }

// // –†–µ–∑—É–ª—å—Ç–∞—Ç:
// const user: User = {
//   name: 'John',
//   age: 30,
// };



// –í –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ ts —Å–æ–∑–¥–∞–π—Ç–µ interface Airplane - —Å–∞–º–æ–ª–µ—Ç —Å –ø–æ–ª—è–º–∏:

// numberOfEngines - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π
// isJet - —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π
// maxHeight - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ø–æ–ª–µ—Ç–∞
// capacity - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
// –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–∏–ø–∞ Airplane.

// interface Airplane {
//   numberOfEngines: number;
//   isJet: boolean;
//   maxHeight: number;
//   capacity?: number;
// }

// const airbus310: Airplane = {
//   numberOfEngines: 4,
//   isJet: false,
//   maxHeight: 11_000,
//   capacity: 100
// }



// –í –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ ts —Å–æ–∑–¥–∞–π—Ç–µ interface Airplane - —Å–∞–º–æ–ª–µ—Ç —Å –ø–æ–ª—è–º–∏:

// numberOfEngines - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π
// isJet - —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π
// maxHeight - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ø–æ–ª–µ—Ç–∞
// capacity - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
// –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–∏–ø–∞ Airplane.

interface Airplane {
  numberOfEngines: number;
  isJet: boolean;
  maxHeight: number;
  capacity?: number;
}

const airbus310: Airplane = {
  numberOfEngines: 4,
  isJet: false,
  maxHeight: 11_000,
  capacity: 100
}

// npm install -g typescript
// npm install -g ts-node
// tsc -v




